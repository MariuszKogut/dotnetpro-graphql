schema {
  query: Query
}

type AddressModel {
  id: Int!
  street: String
  streetNo: String
  zip: String
  city: String
  country: String
}

type CustomerModel {
  id: Int!
  name: String
  location: String
  employeesIds: [Int!]
  employees(customerModel: CustomerModelInput): [PersonModel]
}

type PersonModel {
  id: Int!
  firstname: String
  lastname: String
  residentialAddressId: Int!
  residentialAddress(personModel: PersonModelInput): AddressModel
}

type Query {
  customers(where: CustomerModelFilterInput order: [CustomerModelSortInput!]): [CustomerModel]
  customer(id: Int!): CustomerModel
  persons: [PersonModel]
  addresses: [AddressModel]
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input CustomerModelFilterInput {
  and: [CustomerModelFilterInput!]
  or: [CustomerModelFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  location: StringOperationFilterInput
  employeesIds: ListComparableInt32OperationFilterInput
}

input CustomerModelInput {
  id: Int!
  name: String
  location: String
  employeesIds: [Int!]
}

input CustomerModelSortInput {
  id: SortEnumType
  name: SortEnumType
  location: SortEnumType
}

input ListComparableInt32OperationFilterInput {
  all: ComparableInt32OperationFilterInput
  none: ComparableInt32OperationFilterInput
  some: ComparableInt32OperationFilterInput
  any: Boolean
}

input PersonModelInput {
  id: Int!
  firstname: String
  lastname: String
  residentialAddressId: Int!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD
